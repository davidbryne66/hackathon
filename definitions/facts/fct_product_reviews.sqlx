config {
  type: "table",
  schema: "team_4",
  description: "Product review fact table",
  bigquery: {
    partitionBy: "DATE(PARSE_DATE('%Y%m%d', CAST(review_date_key AS STRING)))",
    clusterBy: ["product_key", "rating"]
  },
  dependencies: ["dim_date", "dim_product"],
  tags: ["fact", "reviews"]
}

WITH reviews AS (
  SELECT
    pr.ProductReviewID,
    pr.ProductID,
    pr.ReviewerName,
    pr.ReviewDate,
    pr.EmailAddress,
    pr.Rating,
    pr.Comments
  FROM ${ref('Production_ProductReview')} pr
)

SELECT
  -- Surrogate Key
  ROW_NUMBER() OVER (ORDER BY r.ProductReviewID) AS review_key,
  
  -- Dimension Keys (lookup from dimensions)
  COALESCE(dp.product_key, -1) AS product_key,
  
  -- Date Key (ReviewDate is INT64 Unix timestamp)
  CAST(
    FORMAT_DATE('%Y%m%d', DATE(TIMESTAMP_SECONDS(CAST(r.ReviewDate AS INT64))))
    AS INT64
  ) AS review_date_key,
  
  -- Degenerate Dimensions
  r.ProductReviewID AS product_review_id,
  r.ReviewerName AS reviewer_name,
  CASE 
    WHEN r.EmailAddress IS NOT NULL THEN 
      CONCAT('***@', SPLIT(r.EmailAddress, '@')[SAFE_OFFSET(1)])
    ELSE NULL
  END AS reviewer_email_domain,
  
  -- Measures
  r.Rating AS rating,
  1 AS review_count,
  
  -- Text Fields
  r.Comments AS comments,
  COALESCE(LENGTH(r.Comments), 0) AS comment_length,
  COALESCE(ARRAY_LENGTH(SPLIT(r.Comments, ' ')), 0) AS comment_word_count,
  
  -- Sentiment (simple rule-based)
  CAST(
    CASE
      WHEN r.Rating >= 4 THEN 0.75
      WHEN r.Rating = 3 THEN 0.0
      ELSE -0.75
    END AS NUMERIC(5,2)
  ) AS sentiment_score,
  
  CASE
    WHEN r.Rating >= 4 THEN 'Positive'
    WHEN r.Rating = 3 THEN 'Neutral'
    ELSE 'Negative'
  END AS sentiment_category,
  
  CASE
    WHEN r.Comments IS NOT NULL AND LENGTH(r.Comments) > 100 THEN 'High'
    WHEN r.Comments IS NOT NULL AND LENGTH(r.Comments) > 20 THEN 'Medium'
    WHEN r.Comments IS NOT NULL THEN 'Low'
    ELSE 'None'
  END AS review_detail_level,
  
  CASE
    WHEN r.Rating = 5 THEN 'Excellent'
    WHEN r.Rating = 4 THEN 'Good'
    WHEN r.Rating = 3 THEN 'Average'
    WHEN r.Rating = 2 THEN 'Poor'
    WHEN r.Rating = 1 THEN 'Very Poor'
    ELSE 'Unrated'
  END AS rating_category,
  
  -- Flags
  CASE WHEN r.Comments IS NOT NULL AND LENGTH(r.Comments) > 0 THEN TRUE ELSE FALSE END AS has_comments,
  FALSE AS is_verified_purchase,
  CASE WHEN LENGTH(r.Comments) >= 100 THEN TRUE ELSE FALSE END AS is_detailed_review,
  CASE WHEN r.Rating IN (1, 5) AND LENGTH(r.Comments) < 20 THEN TRUE ELSE FALSE END AS is_potential_fake,
  
  CASE
    WHEN r.Rating = 3 AND LENGTH(r.Comments) > 50 THEN 10
    WHEN r.Rating IN (1,2,4,5) AND LENGTH(r.Comments) > 100 THEN 8
    WHEN LENGTH(r.Comments) > 50 THEN 5
    WHEN LENGTH(r.Comments) > 0 THEN 3
    ELSE 1
  END AS review_usefulness_score,
  
  DATE_DIFF(
    CURRENT_DATE(),
    DATE(TIMESTAMP_SECONDS(CAST(r.ReviewDate AS INT64))),
    DAY
  ) AS review_age_days,
  
  CASE
    WHEN DATE_DIFF(
      CURRENT_DATE(),
      DATE(TIMESTAMP_SECONDS(CAST(r.ReviewDate AS INT64))),
      DAY
    ) <= 90 THEN TRUE
    ELSE FALSE
  END AS is_recent_review,
  
  -- Audit
  'Adventure_Works' AS source_system,
  CURRENT_TIMESTAMP() AS created_date,
  CURRENT_TIMESTAMP() AS modified_date

FROM reviews r
LEFT JOIN ${ref('dim_product')} dp ON r.ProductID = dp.product_id

WHERE r.ProductReviewID IS NOT NULL
  AND r.ProductID IS NOT NULL
  AND r.Rating IS NOT NULL
  AND r.Rating BETWEEN 1 AND 5

