/*
 * FCT_PRODUCT_INVENTORY - Product Inventory Snapshot Fact Table
 * ============================================================================
 * Description: Daily inventory snapshots by product and location
 * Grain: One row per product per location per snapshot date
 * Source Tables: Production_ProductInventory, Production_Product
 * Load Type: Periodic snapshot (daily)
 * ============================================================================
 */

config {
  type: "table",
  schema: "adventure_works",
  name: "fct_product_inventory",
  description: "Inventory snapshot fact table tracking product quantities by location over time. Semi-additive measures.",
  
  bigquery: {
    partitionBy: "DATE(PARSE_DATE('%Y%m%d', CAST(snapshot_date_key AS STRING)))",
    clusterBy: ["product_key", "location_key"]
  },
  
  dependencies: [
    "dim_date",
    "dim_product",
    "dim_location"
  ],
  
  tags: ["fact", "inventory", "snapshot", "daily"],
  
  assertions: {
    uniqueKey: ["snapshot_date_key", "product_key", "location_key"],
    nonNull: ["snapshot_date_key", "product_key", "location_key", "quantity_on_hand"]
  }
}

-- =============================================================================
-- Inventory Snapshot Fact Query
-- =============================================================================

WITH source_inventory AS (
  SELECT
    inv.ProductID,
    inv.LocationID,
    inv.Shelf,
    inv.Bin,
    inv.Quantity,
    inv.ModifiedDate,
    inv.rowguid
  FROM ${ref('Production_ProductInventory')} inv
),

source_product_details AS (
  SELECT
    p.ProductID,
    p.StandardCost,
    p.ListPrice,
    p.ReorderPoint,
    p.SafetyStockLevel
  FROM ${ref('Production_Product')} p
),

-- Calculate inventory metrics
inventory_base AS (
  SELECT
    inv.ProductID,
    inv.LocationID,
    inv.Shelf,
    inv.Bin,
    inv.Quantity,
    inv.ModifiedDate,
    pd.StandardCost,
    pd.ListPrice,
    pd.ReorderPoint,
    pd.SafetyStockLevel
  FROM source_inventory inv
  INNER JOIN source_product_details pd
    ON inv.ProductID = pd.ProductID
  WHERE inv.Quantity IS NOT NULL
),

-- Calculate average daily usage (for days_of_inventory calculation)
-- This is a simplified version; in production, you'd calculate from actual sales
product_velocity AS (
  SELECT
    ProductID,
    AVG(CAST(OrderQty AS FLOAT64)) AS avg_daily_usage
  FROM ${ref('Sales_SalesOrderDetail')} sod
  INNER JOIN ${ref('Sales_SalesOrderHeader')} soh
    ON sod.SalesOrderID = soh.SalesOrderID
  WHERE soh.OrderDate >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)
  GROUP BY ProductID
)

-- =============================================================================
-- Final Inventory Fact Table with Dimension Lookups
-- =============================================================================

SELECT
  -- Surrogate Key
  ROW_NUMBER() OVER (
    ORDER BY ib.ModifiedDate, ib.ProductID, ib.LocationID
  ) AS inventory_snapshot_key,
  
  -- Date Dimension Foreign Key
  CAST(FORMAT_DATE('%Y%m%d', ib.ModifiedDate) AS INT64) AS snapshot_date_key,
  
  -- Dimension Foreign Keys (Surrogate Key Lookups)
  COALESCE(dp.product_key, -1) AS product_key,
  COALESCE(dl.location_key, -1) AS location_key,
  
  -- Degenerate Dimensions
  ib.Shelf AS shelf,
  ib.Bin AS bin,
  
  -- Semi-Additive Measures (additive across products/locations, NOT across time)
  ib.Quantity AS quantity_on_hand,
  ib.ReorderPoint AS reorder_point,
  ib.SafetyStockLevel AS safety_stock_level,
  
  -- Snapshot Context Values
  ib.StandardCost AS unit_cost,
  ib.ListPrice AS list_price,
  
  -- Calculated Measures
  CAST(ib.Quantity * ib.StandardCost AS NUMERIC(19,4)) AS inventory_value,
  
  -- Days of inventory (how long until stockout at current usage rate)
  CAST(
    SAFE_DIVIDE(
      ib.Quantity,
      NULLIF(pv.avg_daily_usage, 0)
    ) AS INT64
  ) AS days_of_inventory,
  
  -- Alert Flags
  CASE 
    WHEN ib.Quantity < ib.ReorderPoint THEN TRUE 
    ELSE FALSE 
  END AS below_reorder_point,
  
  CASE 
    WHEN ib.Quantity < ib.SafetyStockLevel THEN TRUE 
    ELSE FALSE 
  END AS below_safety_stock,
  
  -- Inventory Status
  CASE
    WHEN ib.Quantity = 0 THEN 'Out of Stock'
    WHEN ib.Quantity < ib.SafetyStockLevel THEN 'Critical'
    WHEN ib.Quantity < ib.ReorderPoint THEN 'Low'
    WHEN ib.Quantity > (ib.ReorderPoint * 3) THEN 'Overstock'
    ELSE 'Normal'
  END AS inventory_status,
  
  -- Audit Fields
  'Adventure_Works' AS source_system,
  CURRENT_TIMESTAMP() AS created_date,
  CURRENT_TIMESTAMP() AS modified_date

FROM inventory_base ib

-- Join to Dimension Tables to get Surrogate Keys
LEFT JOIN ${ref('dim_product')} dp
  ON ib.ProductID = dp.product_id
  AND dp.is_current = TRUE

LEFT JOIN ${ref('dim_location')} dl
  ON ib.LocationID = dl.location_id

-- Join to product velocity for days of inventory calculation
LEFT JOIN product_velocity pv
  ON ib.ProductID = pv.ProductID

WHERE ib.ModifiedDate IS NOT NULL
  AND ib.ProductID IS NOT NULL
  AND ib.LocationID IS NOT NULL

ORDER BY ib.ModifiedDate DESC, ib.ProductID, ib.LocationID

