/*
 * FCT_PRODUCT_REVIEWS - Product Review Fact Table
 * ============================================================================
 * Description: Customer product reviews and ratings
 * Grain: One row per product review
 * Source Tables: Production_ProductReview
 * Purpose: Track customer satisfaction, product feedback, sentiment analysis
 * ============================================================================
 */

config {
  type: "table",
  schema: "adventure_works",
  name: "fct_product_reviews",
  description: "Product review fact table for customer satisfaction analysis. Contains ratings and review text.",
  
  bigquery: {
    partitionBy: "DATE(PARSE_DATE('%Y%m%d', CAST(review_date_key AS STRING)))",
    clusterBy: ["product_key", "rating"]
  },
  
  dependencies: [
    "dim_date",
    "dim_product"
  ],
  
  tags: ["fact", "reviews", "customer_satisfaction", "sentiment", "daily"],
  
  assertions: {
    uniqueKey: ["product_review_id"],
    nonNull: ["product_review_id", "product_key", "review_date_key", "rating"]
  }
}

-- =============================================================================
-- Product Review Fact Query
-- =============================================================================

WITH source_reviews AS (
  SELECT
    pr.ProductReviewID,
    pr.ProductID,
    pr.ReviewerName,
    pr.ReviewDate,
    pr.EmailAddress,
    pr.Rating,
    pr.Comments,
    pr.ModifiedDate
  FROM ${ref('Production_ProductReview')} pr
),

-- Basic sentiment analysis based on rating and comment length
-- In production, you would integrate with ML models for true sentiment analysis
review_sentiment AS (
  SELECT
    ProductReviewID,
    Rating,
    Comments,
    -- Simple sentiment scoring based on rating
    CASE
      WHEN Rating >= 4 THEN 0.75
      WHEN Rating = 3 THEN 0.0
      ELSE -0.75
    END AS sentiment_score,
    
    -- Sentiment category
    CASE
      WHEN Rating >= 4 THEN 'Positive'
      WHEN Rating = 3 THEN 'Neutral'
      ELSE 'Negative'
    END AS sentiment_category,
    
    -- Engagement indicators
    CASE
      WHEN Comments IS NOT NULL AND LENGTH(Comments) > 100 THEN 'High'
      WHEN Comments IS NOT NULL AND LENGTH(Comments) > 20 THEN 'Medium'
      WHEN Comments IS NOT NULL THEN 'Low'
      ELSE 'None'
    END AS review_detail_level
  FROM source_reviews
),

-- Review base with sentiment
review_base AS (
  SELECT
    sr.ProductReviewID,
    sr.ProductID,
    sr.ReviewerName,
    sr.ReviewDate,
    sr.EmailAddress,
    sr.Rating,
    sr.Comments,
    rs.sentiment_score,
    rs.sentiment_category,
    rs.review_detail_level
  FROM source_reviews sr
  LEFT JOIN review_sentiment rs
    ON sr.ProductReviewID = rs.ProductReviewID
)

-- =============================================================================
-- Final Product Review Fact Table with Dimension Lookups
-- =============================================================================

SELECT
  -- Surrogate Key
  ROW_NUMBER() OVER (ORDER BY rb.ProductReviewID) AS review_key,
  
  -- Dimension Foreign Keys (Surrogate Key Lookups)
  COALESCE(dp.product_key, -1) AS product_key,
  
  -- Date Dimension Foreign Key
  -- ReviewDate is stored as INT64 (Unix timestamp), convert to date key
  CAST(
    FORMAT_DATE(
      '%Y%m%d', 
      DATE(TIMESTAMP_SECONDS(CAST(rb.ReviewDate AS INT64)))
    ) AS INT64
  ) AS review_date_key,
  
  -- Degenerate Dimensions
  rb.ProductReviewID AS product_review_id,
  rb.ReviewerName AS reviewer_name,
  
  -- Masked email for privacy (show domain only)
  CASE 
    WHEN rb.EmailAddress IS NOT NULL THEN 
      CONCAT('***@', SPLIT(rb.EmailAddress, '@')[SAFE_OFFSET(1)])
    ELSE NULL
  END AS reviewer_email_domain,
  
  -- Additive Measures
  rb.Rating AS rating,
  1 AS review_count, -- Always 1, useful for aggregations (COUNT, SUM)
  
  -- Text Fields
  rb.Comments AS comments,
  
  -- Text Analysis Measures
  COALESCE(LENGTH(rb.Comments), 0) AS comment_length,
  COALESCE(
    ARRAY_LENGTH(SPLIT(rb.Comments, ' ')),
    0
  ) AS comment_word_count,
  
  -- Sentiment Analysis Measures
  -- (Placeholder for ML-based sentiment; currently rule-based)
  CAST(rb.sentiment_score AS NUMERIC(5,2)) AS sentiment_score,
  rb.sentiment_category AS sentiment_category,
  rb.review_detail_level AS review_detail_level,
  
  -- Rating Categories
  CASE
    WHEN rb.Rating = 5 THEN 'Excellent'
    WHEN rb.Rating = 4 THEN 'Good'
    WHEN rb.Rating = 3 THEN 'Average'
    WHEN rb.Rating = 2 THEN 'Poor'
    WHEN rb.Rating = 1 THEN 'Very Poor'
    ELSE 'Unrated'
  END AS rating_category,
  
  -- Flags
  CASE 
    WHEN rb.Comments IS NOT NULL AND LENGTH(rb.Comments) > 0 THEN TRUE 
    ELSE FALSE 
  END AS has_comments,
  
  -- Verified purchase flag (would come from sales data in production)
  -- Placeholder: check if reviewer has matching order
  FALSE AS is_verified_purchase, -- TODO: Join with sales data
  
  -- Review quality indicators
  CASE
    WHEN LENGTH(rb.Comments) >= 100 THEN TRUE
    ELSE FALSE
  END AS is_detailed_review,
  
  CASE
    WHEN rb.Rating IN (1, 5) AND LENGTH(rb.Comments) < 20 THEN TRUE
    ELSE FALSE
  END AS is_potential_fake, -- Extreme rating with no detail
  
  -- Review usefulness score (simple heuristic)
  CASE
    WHEN rb.Rating = 3 AND LENGTH(rb.Comments) > 50 THEN 10 -- Balanced reviews are useful
    WHEN rb.Rating IN (1,2,4,5) AND LENGTH(rb.Comments) > 100 THEN 8
    WHEN LENGTH(rb.Comments) > 50 THEN 5
    WHEN LENGTH(rb.Comments) > 0 THEN 3
    ELSE 1
  END AS review_usefulness_score,
  
  -- Review age (for recency weighting)
  DATE_DIFF(
    CURRENT_DATE(),
    DATE(TIMESTAMP_SECONDS(CAST(rb.ReviewDate AS INT64))),
    DAY
  ) AS review_age_days,
  
  -- Recency flag
  CASE
    WHEN DATE_DIFF(
      CURRENT_DATE(),
      DATE(TIMESTAMP_SECONDS(CAST(rb.ReviewDate AS INT64))),
      DAY
    ) <= 90 THEN TRUE
    ELSE FALSE
  END AS is_recent_review,
  
  -- Audit Fields
  'Adventure_Works' AS source_system,
  CURRENT_TIMESTAMP() AS created_date,
  CURRENT_TIMESTAMP() AS modified_date

FROM review_base rb

-- Join to Dimension Tables to get Surrogate Keys
LEFT JOIN ${ref('dim_product')} dp
  ON rb.ProductID = dp.product_id
  AND dp.is_current = TRUE

WHERE rb.ProductReviewID IS NOT NULL
  AND rb.ProductID IS NOT NULL
  AND rb.Rating IS NOT NULL
  AND rb.Rating BETWEEN 1 AND 5 -- Validate rating range

ORDER BY rb.ProductReviewID

